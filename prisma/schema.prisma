// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String          @id @default(cuid())
  email              String?         @unique
  password           String?
  emailVerified      DateTime?
  image              String?
  role               Role            @default(TRAINER)
  name               String?
  gender             Gender?
  birthDate          DateTime?
  bio                String?
  emailNotifications Boolean         @default(true)
  smsNotifications   Boolean         @default(false)
  membership         MembershipType?
  status             UserStatus?
  createdAt          DateTime        @default(now())
  specialization     String? // For trainers
  rating             Float? // For trainers
  clientsCount       Int?            @default(0) // For trainers
  trainer            User?           @relation("UserTrainer", fields: [trainerId], references: [id])
  trainerId          String?
  clients            User[]          @relation("UserTrainer")
  program            Program?
  userChats          Chat[]          @relation("UserChats")
  trainerChats       Chat[]          @relation("TrainerChats")
  messages           Message[]
  accounts           Account[]
  sessions           Session[]
  userSchedules      Schedule[]      @relation("UserSchedules")
  trainerSchedules   Schedule[]      @relation("TrainerSchedules")
  likes              Like[]
  userNotifications     Notification[] @relation("UserNotifications")
  trainerNotifications  Notification[] @relation("TrainerNotifications")
}

model Program {
  id              String      @id @default(cuid())
  status          ProgramStatus
  wideStatus      WideStatus
  currentProgress Float
  notes           String?
  userId          String      @unique
  user            User        @relation(fields: [userId], references: [id])
}

enum ProgramStatus {
  IN_PROGRESS
  NEAR_COMPLETE
  COMPLETED
}

enum WideStatus {
  ACTIVE
  INACTIVE
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Schedule {
  id                  String   @id @default(cuid())
  date                DateTime
  startTime           DateTime
  endTime             DateTime
  scheduleLink        String?
  scheduleSubject     String
  scheduleDescription String?
  sessionType         String?
  status              String   @default("pending")
  userId              String
  trainerId           String?
  user                User     @relation("UserSchedules", fields: [userId], references: [id])
  trainer             User     @relation("TrainerSchedules", fields: [trainerId], references: [id])
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  notifications       Notification[]

  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Chat {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  trainerId String
  user      User      @relation("UserChats", fields: [userId], references: [id])
  trainer   User      @relation("TrainerChats", fields: [trainerId], references: [id])
  messages  Message[]

  @@index([userId])
  @@index([trainerId])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  chatId    String
  senderId  String
  chat      Chat     @relation(fields: [chatId], references: [id])
  sender    User     @relation(fields: [senderId], references: [id])

  @@index([chatId])
  @@index([senderId])
}

model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@unique([postId, userId])
}

model Notification {
  id         String   @id @default(cuid())
  message    String
  createdAt  DateTime @default(now())
  scheduleId String
  userId     String
  trainerId  String
  user       User     @relation("UserNotifications", fields: [userId], references: [id])
  trainer    User     @relation("TrainerNotifications", fields: [trainerId], references: [id])
  schedule   Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([trainerId])
  @@index([scheduleId])
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
  TRAINER
}

enum Gender {
  MALE
  FEMALE
}

enum MembershipType {
  BASIC
  PREMIUM
}

enum UserStatus {
  ACTIVE
  INACTIVE
}